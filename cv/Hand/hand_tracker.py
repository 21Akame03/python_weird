import cv2
import mediapipe as mp
import time
import math


class handDetector() :
    def __init__(self, mode = False, max_hands = 2, detector_confidence = 0.5, track_confidence = 0.5):
        self.mode = mode
        self.max_hands = max_hands
        self.detector_confidence = detector_confidence
        self.track_confidence = track_confidence

        # object of hand detector 
        self.mpHands = mp.solutions.hands
        self.hands = self.mpHands.Hands(self.mode, self.max_hands, self.detector_confidence, self.track_confidence)

        # drawing of points
        self.mpDraw = mp.solutions.drawing_utils
        
        # Finger tip landmark ids
        # thumb, index, middle, ring, pinky
        self.tipIds = [4, 8, 12, 16, 20]
    

    def findHands(self, frame, draw=True) :
        imgRGB = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # use mediapipe classifier
        self.results = self.hands.process(imgRGB)

        if self.results.multi_hand_landmarks:
            for handlm in self.results.multi_hand_landmarks:
                if draw:
                    # pass in image to be displayed
                    self.mpDraw.draw_landmarks(frame, handlm, self.mpHands.HAND_CONNECTIONS)
        
        return frame


    def findposition(self, frame, handno=0, draw=False) :
        self.lmlist = []
        x_lmlist = []
        y_lmlist = []

        if  self.results.multi_hand_landmarks:
            myhand =  self.results.multi_hand_landmarks[handno]
            for id, lm in enumerate(myhand.landmark):

                # find integer position of the points
                h, w, c = frame.shape
                cx, cy = int(lm.x * w), int(lm.y * h)
                lm = [id, cx, cy]
                
                # append the x and y coordinates for the bounding box
                x_lmlist.append(cx)
                y_lmlist.append(cy)
                
                # creating a list of landmarks for the individual hand
                self.lmlist.append(lm)
                
                # bounding box coordinates
                bbox = min(x_lmlist), min(y_lmlist), max(x_lmlist), max(y_lmlist)


                if draw :
                    cv2.rectangle(frame, (bbox[0] -20, bbox[1] -20), (bbox[2] + 20, bbox[3] + 20), (0, 0, 255),2)
                #  if id == 0:
                #      cv2.circle(frame, (cx, cy), 15, (255, 255, 0), cv2.FILLED)
                #  else:
                #      cv2.circle(frame, (cx, cy), 5, (245, 25, 15), cv2.FILLED) 
                
        return self.lmlist

    
    # find the disance between 2 landmark numbers provided by the arguments
    def distanceBetween2Lm(self, frame, Lm1, Lm2, Draw=False) :
        
        # tthe lm list is generated by above method "findposition"
        x1, y1 = self.lmlist[Lm1][1], self.lmlist[Lm1][2]
        x2, y2 = self.lmlist[Lm2][1], self.lmlist[Lm2][2]

        #  midpoint
        ## NOTE: // is beacause we need an integer value and not a decimal value which we get from /
        midpoint = [((x1 + x2)//2), ((y1 + y2)//2)]
        
        # draw the connection between the 2 landmarks
        if Draw :
            cv2.circle(frame, (x1, y1), 15, (255, 255, 255), cv2.FILLED)
            cv2.circle(frame, (x2, y2), 15, (255, 0, 255), cv2.FILLED)
            cv2.line(frame, (x1, y1), (x2, y2), (0, 255, 255), 3)
            cv2.circle(frame, (midpoint[0], midpoint[1]), 15, (150, 150, 150), cv2.FILLED)

        #length of the liine between thumb and index
        # A^2 = B^2 + C^2  ## pythagoras theorem
        length = math.sqrt(((x2 - x1)**2 + (y2 - y1)**2))

        return length, midpoint


    #find which fingers and how many are up 
    def find_fingers_up(self) :
        fingers = []
       
        # thumb 
        # check if the tip landmark is lower than the previous landmark
        if self.lmlist[self.tipIds[0]][1] > self.lmlist[self.tipIds[0] - 1][1]:
            fingers.append(True)
        else:
            fingers.append(False)

        # every other fingers
        for id in range(1, 4):
            if self.lmlist[self.tipIds[id]][1] > self.lmlist[self.tipIds[id] - 2][1]:
                fingers.append(True)
            else:
                fingers.append(False)
        
        # thumb 
        # check if the tip landmark is lower than the previous landmark
        if self.lmlist[self.tipIds[4]][1] > self.lmlist[self.tipIds[4] - 1][1]:
            fingers.append(True)
        else:
            fingers.append(False)

        
        return fingers



def main():
    cap = cv2.VideoCapture(0)
    cap.set(3, 1280)
    cap.set(4, 720)


    detector = handDetector()

    # fps
    PreviousTime = 0
    currentTime = 0

    while  True:
        success, frame = cap.read()

        frame = detector.findHands(frame)
        lmlist = detector.findposition(frame)
        # if len(lmlist) != 0:
        #     print(lmlist[4])

        # calculting the fps and displaying it
        currentTime = time.time()
        fps = 1/ (currentTime - PreviousTime)
        PreviousTime = currentTime
    
        cv2.putText(frame, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 3, (255, 255, 255), 3)

        cv2.imshow("Image", cv2.flip(frame, 1))
        cv2.waitKey(1)


if __name__ == '__main__':
    main()
